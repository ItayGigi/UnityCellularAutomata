// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct rule
{
    int startingState;
    int endingState;
    int minSum;
    int maxSum;
    int sumState;
    int neighborhoodType;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<int> Board;
RWTexture2D<int> Result;
uint resolution;
StructuredBuffer<rule> rules;

int getCell(int x, int y)
{
    x = (x < 0) ? resolution - (uint(-x) % resolution) : uint(x) % resolution;
    y = (y < 0) ? resolution - (uint(-y) % resolution) : uint(y) % resolution;
    return Board[int2(x, y)];
}

int getNeighborhoodSize(int type)
{
    return (type) ? 4 : 8;
}

int2 getNeighborhoodOffset(int i, int type)
{
    int2 mooreNeighborhood[8] =
    {
        int2(1, 1),
        int2(1, 0),
        int2(1, -1),
        int2(0, 1),
        int2(0, -1),
        int2(-1, 1),
        int2(-1, 0),
        int2(-1, -1)
    };

    int2 vonNeumannNeighborhood[4] =
    {
        int2(0, 1),
        int2(0, -1),
        int2(1, 0),
        int2(-1, 0),
    };
    
    return (type) ? vonNeumannNeighborhood[i] : mooreNeighborhood[i];
}

int countNeighborsOfState(int state, int2 pos, int neighborhoodType = 0)
{
    int sum = 0;
    for (int i = 0; i < getNeighborhoodSize(neighborhoodType); i++)
    {
        int2 offset = 0;
        offset = getNeighborhoodOffset(i, neighborhoodType);
        sum += (getCell(pos.x + offset.x, pos.y + offset.y) == state);
    }
    return sum;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int state = Result[id.xy] = Board[id.xy];
    
    uint ruleCount, strideSize;
    rules.GetDimensions(ruleCount, strideSize);
    for (uint i = 0; i < ruleCount; i++)
    {
        if (rules[i].startingState == state)
        {
            int sum = countNeighborsOfState(rules[i].sumState, id.xy, rules[i].neighborhoodType);
            if (sum >= rules[i].minSum && sum <= rules[i].maxSum)
                Result[id.xy] = rules[i].endingState;
        }
    }
}
